//Core 3.4 - Simple, yet powerful ScriptAPI base

var coreVersion = "3.4", coreAutoUpdate = false, scriptAutoUpdate = false, module, command, _AdaptedModule, scriptName, scriptVersion, scriptAuthor;
(API_V2 = !_AdaptedModule) && (_AdaptedModule = undefined);

function registerModule(m) {
    if (!Object.keys(m).length) return;
    addCategory(m.category); _settings = {}; m.values && (Array.isArray(m.values) ? m.values : [m.values]).forEach(function (v, i) {_settings[v.getName()] = !API_V2 && v instanceof _AdaptedValue ? v.getValue() : v});

    script.registerModule({
        name: m.name || API_V2 ? script.scriptName || "Module" : "Module",
        category: m.category || "Custom",
        description: m.description || "",
        settings: _settings
    }, function (module) {
        m.onEnable && module.on("enable", function () {m.onEnable()});
        m.onDisable && module.on("disable", function () {m.onDisable()});
        m.onUpdate && module.on("update", function () {m.onUpdate()});
        m.onMotion && module.on("motion", function (e) {m.onMotion(e)});
        m.onRender2D && module.on("render2D", function (e) {m.onRender2D(e)});
        m.onRender3D && module.on("render3D", function (e) {m.onRender3D(e)});
        m.onAttack && module.on("attack", function (e) {m.onAttack(e)});
        m.onJump && module.on("jump", function (e) {m.onJump(e)});
        m.onPacket && module.on("packet", function (e) {m.onPacket(e)});
        m.onKey && module.on("key", function (e) {m.onKey(e)});
        m.onMove && module.on("move", function (e) {m.onMove(e)});
        m.onStep && module.on("step", function (e) {m.onStep(e)});
        m.onStepConfirm && module.on("stepConfirm", function () {m.onStepConfirm()});
        m.onWorld && module.on("world", function (e) {m.onWorld(e)});
        m.onSession && module.on("session", function () {m.onSession()});
        m.onClickBlock && module.on("clickBlock", function (e) {m.onClickBlock(e)});
        m.onStrafe && module.on("strafe", function (e) {m.onStrafe(e)});
        m.onSlowDown && module.on("slowDown", function (e) {m.onSlowDown(e)});
    });
}

function registerCommand(c) {
    if (!Object.keys(c).length) return;

    script.registerCommand(_command = {
        name: c.name || (c.commands && c.commands.length ? c.commands[0] : API_V2 ? script.scriptName || "Command" : "Command"),
        aliases: c.commands || []
    }, function (command) {
        c.onExecute && command.on("execute", function (a) {
            _prefix = LiquidBounce.commandManager.prefix;
            a = Java.from(a).map(function (a, i) a.toLowerCase().replace(!i ? _prefix : "", ""));
            _error = null; _lastIndex = -1; _lastObject = null;
            (_object = c.subcommands) && a.some(function (arg, i) {
                if (i) {
                    if ((_object = _object[arg]) instanceof Object) _lastIndex = i + 1, _lastObject = _object;
                    else if (_object == undefined && (!~_lastIndex || i <= _lastIndex)) return _error = [arg, a.slice(0, _lastIndex), _lastObject || c.subcommands];
                }
            });

            if (_object || _error) {
                print("");
                a.length == 1 && print("§8▏§7§l", command.getCommand(), "§8v§l" + (c.version || script.scriptVersion), "§7by§8§l", (c.author || Java.from(script.scriptAuthors)));
                _object ? _object instanceof Object ? (print("§8▏ §7Valid subcommands§8: (§7§l" + Object.keys(_object).length + "§8)"), print("§8▏§f", _prefix + a.join(" "), "§8[§f" + Object.keys(_object).join("§7, §f") + "§8]")) : print("§8▏ §7Usage§8:§f", _prefix + a.join(" "), "„§7" + _object + "§f“") : (print("§4▏ §cInvalid argument§4:§c", _prefix + a.join(" ").replace(_error[0], "„§4§l" + _error[0] + "§c“")), print("§8▏ §7Valid subcommands§8: (§7§l" + Object.keys(_error[2]).length + "§8)"), print("§8▏§f", _prefix + _error[1].join(" "), "§8[§f" + Object.keys(_error[2]).join("§7, §f") + "§8]"));
                a.length == 1 && c.commands.length > 1 && (print("§8▏ §7Available aliases§8: (§7§l" + (c.commands.length - 1) + "§8)"), print("§8▏§f", _prefix + c.commands.map(function (e) e.toLowerCase()).filter(function (e) e != a[0]).join("§7, §f" + _prefix)));
            } else c.onExecute(a);
        });
    });
}

/*------------------*/
/* Custom functions */
/*------------------*/

function isMovingHorizontally(entity) entity && entity != mc.thePlayer ? entity.lastTickPosX != entity.posX || entity.lastTickPosZ != entity.posZ : !!(mc.thePlayer.movementInput.moveForward || mc.thePlayer.movementInput.moveStrafe);

function isMovingVertically(entity) entity && entity != mc.thePlayer ? entity.lastTickPosY != entity.posY : mc.thePlayer.movementInput.jump || mc.thePlayer.movementInput.sneak;

function isMoving(entity) isMovingHorizontally(entity) || isMovingVertically(entity);

function isInputHorizontally() Keyboard.isKeyDown(mc.gameSettings.keyBindForward.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindLeft.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindBack.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindRight.getKeyCode());

function isInputVertically() Keyboard.isKeyDown(mc.gameSettings.keyBindJump.getKeyCode()) || Keyboard.isKeyDown(mc.gameSettings.keyBindSneak.getKeyCode());

function move(horizontal, vertical, timer, event, ignoreInput) {
    horizontal = ignoreInput ? horizontal : isInputHorizontally() ? horizontal : 0;
    vertical = ignoreInput ? vertical : isInputHorizontally() ? vertical : null;
    yaw = MovementUtils.getDirection();
    timer != null && timer > 0 && (mc.timer.timerSpeed = timer);
    horizontal != null && ((mc.thePlayer.motionX = -Math.sin(yaw) * horizontal, mc.thePlayer.motionZ = Math.cos(yaw) * horizontal), (event && (event.setX(mc.thePlayer.motionX), event.setZ(mc.thePlayer.motionZ))));
    vertical != null && ((mc.thePlayer.motionY = vertical), (event && event.setY(vertical)));
}

function interval(ms, func) (_timer = new JavaTimer("setInterval", true), _timer.schedule(func, 0, ms), _timer);

function timeout(ms, func) (_timer = new JavaTimer("setTimeout", true), _timer.schedule(func, ms), _timer);

function setValues(module, values) {
    if (!(module instanceof ScriptModule)) return
    _valuesmap = new LinkedHashMap();
    (Array.isArray(values) ? values : [values]).forEach(function (v, i) {_valuesmap.put(i, v instanceof Value ? v : v.getValue())});
    (_valuesField = module.class.getDeclaredField("_values")).setAccessible(true);
    _valuesField.set(module, _valuesmap); _valuesmap = undefined;
}

function getValues(module) {
    if (module instanceof ScriptModule) {
        (_valuesField = module.class.getDeclaredField("_values")).setAccessible(true);
        return Java.from(_valuesField.get(module).values());
    } else return Java.from(module.values);
}

function getNearestTarget(entityType, entity) {
    _targetList = []; entity = entity || mc.thePlayer;
    mc.theWorld.loadedEntityList.forEach(function (e) {e != entity && (entityType ? e instanceof entityType : EntityUtils.isSelected(e, true)) && _targetList.push(e)});
    _targetList.sort(function (a,b) {return entity.getDistanceToEntity(a) - entity.getDistanceToEntity(b)});
    return _targetList[0];
}

function getPlayer(nick) {
    _playerEntity = null;
    Java.from(mc.theWorld.playerEntities).some(function (e) {if (StringUtils.stripControlCodes(e.getName()).equals(nick)) return _playerEntity = e});
    return _playerEntity;
}

function rand(min, max) Math.random() * (max - min) + min;

function getDurability(itemStack) itemStack && itemStack.getMaxDamage() - itemStack.getItemDamage();

function addCategory(name) name && !(_values = Java.from(_enumValues.get(null))).some(function (v) {return v.getDisplayName().toLowerCase() == name.toLowerCase()}) && _enumValues.set(null, Java.to(_values.concat(_accessor.newInstance([name.toUpperCase(), 0, name])), "net.ccbluex.liquidbounce.features.module.ModuleCategory[]"));

function removeCategory(name) Java.from(_enumValues.get(null)).some(function (v, i, a) {if (v.getDisplayName().contains(name)) {a.splice(i, 1); return !_enumValues.set(null, Java.to(a, "net.ccbluex.liquidbounce.features.module.ModuleCategory[]"))}});

print = (Chat = chat = {print: function () {ClientUtils.displayChatMessage(Array.prototype.slice.call(arguments).join(" "))}}).print;

function showMessage(text, title, alwaysOnTop, type)
    new Thread(new Runnable({
        run: function () {
            (dialog = new JOptionPane(text || "", type || JOptionPane.INFORMATION_MESSAGE).createDialog(title || "")).setAlwaysOnTop(alwaysOnTop != null ? alwaysOnTop : true);
            dialog.setVisible(true);
        }
    })).start();

function getMethod(clazz, methodName) ((_method = Java.from((clazz instanceof Class ? clazz : clazz.class).getDeclaredMethods()).find(function (m) m.getName() == methodName)).setAccessible(true), _method);

function getField(clazz, fieldName) ((_field = Java.from((clazz instanceof Class ? clazz : clazz.class).getDeclaredFields()).find(function (f) f.getName() == fieldName)).setAccessible(true), _field);

function importPackage() Array.prototype.slice.call(arguments).forEach(function (e) _classes.filter(function (c) c.name.startsWith(e) && !c.name.contains("$")).forEach(function (c) eval(c.simpleName + "=StaticClass.forClass(c)")));

value = {
    createBlock: function (name, value) {
        return new BlockValue(name, value)
    },
    createBoolean: function (name, value) {
        return new BoolValue(name, value)
    },
    createFloat: function (name, value, min, max) {
        return new FloatValue(name, value, min, max)
    },
    createFont: function (name, value) {
        return new FontValue(name, value)
    },
    createInteger: function (name, value, min, max) {
        return new IntegerValue(name, value, min, max)
    },
    createList: function (name, values, value) {
        return new ListValue(name, values, value)
    },
    createText: function (name, value) {
        return new TextValue(name, value)
    }
}

/*------------------*/
/* Object functions */
/*------------------*/

//array.shuffle([boolean]) - randomizes elements order, overwrites and returns the array
//parameters: boolean - optional; false -> doesn't shuffle
Object.defineProperty(Array.prototype, "shuffle", {
    writable: true,
    value: function (bool) {
        if (bool === false || !(i = this.length)) return this;
        while (--i) {
            j = ~~(Math.random() * (i + 1));
            temp = this[i];
            this[i] = this[j];
            this[j] = temp;
        } return this;
    }
});

//array.find(function, [boolean]) - finds first element that fullfills a condition, returns the element or index of the element
//parameters: function - defines the condition, boolean - optional; true -> returns index
Object.defineProperty(Array.prototype, "find", {
    value: function (func, returnIndex) {
        for (i in this) if (func(this[i])) return returnIndex ? i : this[i];
        return returnIndex ? -1 : null;
        //return this.filter(function (e) {return func(e)})[0];
    }
});

//array.includes(element) - checks if array has element, returns boolean
//parameters: element - element of the array to check for
Object.defineProperty(Array.prototype, "includes", {
    value: function (element) {
        return this.indexOf(element) > -1;
    }
});

//string.includes(string, [boolean]) - checks if string contains other string, case sensitive / insensitive, returns boolean
//parameters: string - string to check for, boolean - optional; true -> case insensitive search
Object.defineProperty(String.prototype, "includes", {
    value: function (string, ignoreCase) {
        return ignoreCase ? this.toString().toLowerCase().contains(string.toLowerCase()) : this.toString().contains(string);
    }
});

/*----------------*/
/* Java importing */
/*----------------*/

//Used classes
LiquidBounce = Java.type("net.ccbluex.liquidbounce.LiquidBounce"); Keyboard = Java.type("org.lwjgl.input.Keyboard"); JavaTimer = Java.type("java.util.Timer"); List = Java.type("java.util.List"); ScriptModule = Java.type("net.ccbluex.liquidbounce.script.api.ScriptModule"); LinkedHashMap = Java.type("java.util.LinkedHashMap"); Constructor = Java.type("java.lang.reflect.Constructor"); Modifier = Java.type("java.lang.reflect.Modifier"); Field = Java.type("java.lang.reflect.Field"); ModuleCategory = Java.type("net.ccbluex.liquidbounce.features.module.ModuleCategory"); Script = Java.type("net.ccbluex.liquidbounce.script.Script"); File = Java.type("java.io.File"); JOptionPane = Java.type("javax.swing.JOptionPane"); Thread = Java.type("java.lang.Thread"); Runnable = Java.type("java.lang.Runnable"); FileUtils = Java.type("org.apache.commons.io.FileUtils"); ClassLoader = Java.type("java.lang.ClassLoader"); Class = Java.type("java.lang.Class"); chat = Chat; moduleManager = LiquidBounce.moduleManager; _isLatest = true;
_classes = Java.from(getField(ClassLoader, "classes").get(Thread.currentThread().getContextClassLoader())); StaticClass = getMethod(_class = Class.forName("jdk.internal.dynalink.beans.StaticClass"), "forClass").invoke(null, _class); _class = undefined;

//Packages
importPackage("net.minecraft.block", "net.minecraft.client.gui", "net.minecraft.client.renderer", "net.minecraft.entity", "net.minecraft.init", "net.minecraft.item", "net.minecraft.network", "net.ccbluex.liquidbounce.utils", "net.minecraft.util", "net.ccbluex.liquidbounce.value");

script.on("load", function () {
    module = Array.isArray(module) ? module : [module || {}]; command = Array.isArray(command) ? command : [command || {}];
    if (!API_V2) {
        script.scriptName = (scriptName || module[0].name || (command[0].commands && command[0].commands[0]) || "Script").toString();
        script.scriptAuthors = [(scriptAuthor || module[0].author || command[0].author || "Author").toString()];
        script.scriptVersion = (scriptVersion || module[0].version || command[0].version || "1.0").toString();
    }

    if (!LiquidBounce.clickGui) {
        _updated = (_file = new File("logs/coreUpdater.log")).exists() ? JSON.parse(FileUtils.readFileToString(_file)) : {};
        try {
            ["Core", script.scriptName].forEach(function (n, i) {
                if ([coreAutoUpdate, scriptAutoUpdate][i] !== false && !_updated[n]) {
                    if (_response = HttpUtils.get("https://dyskord.cc/check?name=" + n + "&ver=" + [coreVersion, script.scriptVersion][i])) {
                        HttpUtils.download("https://raw.githubusercontent.com/CzechHek/Core/master/" + ["Core.lib", "Scripts/" + n + ".js"][i], [new File("LiquidBounce-1.8/scripts/Core.lib"), script.getScriptFile()][i]);
                        showMessage("Automatically updated " + n + " " + [coreVersion, script.scriptVersion][i] + " to " + _response, "Core Updater"); _isLatest = false;
                    } _updated[n] = true;
                }
            }); FileUtils.writeStringToFile(_file, JSON.stringify(_updated));
        } catch (e) {
            print("Couldn't check", script.scriptName, "for updates!", e); _isLatest = true;
        };
    };

    if (!_isLatest) {
        LiquidBounce.scriptManager.scripts.remove(script);
        LiquidBounce.scriptManager.scripts.add(new Script(script.getScriptFile()));
        return
    } else _updated = _response = _isLatest = undefined;

    (_enumValues = ModuleCategory.class.getDeclaredField("$VALUES")).setAccessible(true);

    (_modifiers = Field.class.getDeclaredField("modifiers")).setAccessible(true);
    _modifiers.setInt(_enumValues, _enumValues.getModifiers() & ~Modifier.FINAL);

    (_constructor = ModuleCategory.class.getDeclaredConstructors()[0]).setAccessible(true);
    (_acquireAccessor = Constructor.class.getDeclaredMethod("acquireConstructorAccessor")).setAccessible(true);
    _accessor = _acquireAccessor.invoke(_constructor);
    
    [module, command].forEach(function (c, i) c.forEach(function (v) [registerModule, registerCommand][i](v)));
});

script.on("enable", function () {
    FileUtils.deleteQuietly(new File("logs/coreUpdater.log"));
    LiquidBounce.moduleManager.modules.forEach(function (m) eval(m.name + "Module=m"));
    [module, command].forEach(function (c) c.forEach(function (v) v.onLoad && v.onLoad()));
});

script.on("disable", function () [module, command].forEach(function (c) c.forEach(function (v) v.onUnload && v.onUnload())));
